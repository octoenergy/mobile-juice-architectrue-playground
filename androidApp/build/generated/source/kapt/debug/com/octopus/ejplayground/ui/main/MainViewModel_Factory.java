// Generated by Dagger (https://dagger.dev).
package com.octopus.ejplayground.ui.main;

import com.octopus.ejplayground.domain.Announcer;
import com.octopus.ejplayground.domain.Navigator;
import com.octopus.ejplayground.services.GithubService;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GithubService> githubServiceProvider;

  private final Provider<Navigator> navigatorProvider;

  private final Provider<Announcer> announcerProvider;

  public MainViewModel_Factory(Provider<GithubService> githubServiceProvider,
      Provider<Navigator> navigatorProvider, Provider<Announcer> announcerProvider) {
    this.githubServiceProvider = githubServiceProvider;
    this.navigatorProvider = navigatorProvider;
    this.announcerProvider = announcerProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(githubServiceProvider.get(), navigatorProvider.get(), announcerProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GithubService> githubServiceProvider,
      Provider<Navigator> navigatorProvider, Provider<Announcer> announcerProvider) {
    return new MainViewModel_Factory(githubServiceProvider, navigatorProvider, announcerProvider);
  }

  public static MainViewModel newInstance(GithubService githubService, Navigator navigator,
      Announcer announcer) {
    return new MainViewModel(githubService, navigator, announcer);
  }
}
