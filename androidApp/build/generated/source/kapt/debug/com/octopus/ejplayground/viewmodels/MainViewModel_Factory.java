// Generated by Dagger (https://dagger.dev).
package com.octopus.ejplayground.viewmodels;

import com.octopus.ejplayground.domain.Announcer;
import com.octopus.ejplayground.domain.DispatcherProvider;
import com.octopus.ejplayground.domain.GithubRepoManager;
import com.octopus.ejplayground.domain.Navigator;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GithubRepoManager> githubRepoManagerProvider;

  private final Provider<Navigator> navigatorProvider;

  private final Provider<Announcer> announcerProvider;

  private final Provider<DispatcherProvider> dispatcherProvider;

  public MainViewModel_Factory(Provider<GithubRepoManager> githubRepoManagerProvider,
      Provider<Navigator> navigatorProvider, Provider<Announcer> announcerProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    this.githubRepoManagerProvider = githubRepoManagerProvider;
    this.navigatorProvider = navigatorProvider;
    this.announcerProvider = announcerProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(githubRepoManagerProvider.get(), navigatorProvider.get(), announcerProvider.get(), dispatcherProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GithubRepoManager> githubRepoManagerProvider,
      Provider<Navigator> navigatorProvider, Provider<Announcer> announcerProvider,
      Provider<DispatcherProvider> dispatcherProvider) {
    return new MainViewModel_Factory(githubRepoManagerProvider, navigatorProvider, announcerProvider, dispatcherProvider);
  }

  public static MainViewModel newInstance(GithubRepoManager githubRepoManager, Navigator navigator,
      Announcer announcer, DispatcherProvider dispatcherProvider) {
    return new MainViewModel(githubRepoManager, navigator, announcer, dispatcherProvider);
  }
}
